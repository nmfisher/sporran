
1. Introduction
---------------

Although Sporran is designed to 'just work' and allow the user to carry on working with CouchDB whilst
online or offline there's a lot going on behind the scenes and also more fine grained control can be
exerted by user if they chose to do so. This is described below.

1.1 Philosophy
--------------

Sporran is designed to be used as a CouchDB client with a similar interface to PouchDb and the fact 
that like PouchDb it allows offline as well as online usage. 

There are differences however, the main one being that the CouchDB database is deemed to be the master 
in all cases of conflict, in that when syncing if Couch has a different document revision to the 
local one held then it is deemed to be the master and its document wins. This means any local updates that
have been made while offline will be lost. This however will only occur if you are not the only user
of your database, if you are a single user and no one else can change your database then this situation
will not occur as your local revisions will always match CouchDB.

1.2 Online
----------

When online all document and attachment updates are committed to local storage as NOT_UPDATED, then
CouchDb is updated, if successful the document is now marked as UPDATED in local storage and its
revision and any new/deleted attachments are updated. If the update fails the document is left in local storage, 
the document will only be removed from local storage if CouchDB replies with a conflicting
revision in which case the document will be updated from the CouchDB document and its revision updated
as necessary.

Whilst online CouchDD responds to all read and delete requests, local storage being updated as required.


1.3 Offline
-----------

When the user goes offline all document update/creation requests are performed in local storage with
the update being marked a NOT_UPDATED. Reads are from local storage and deletes operate on local storage 
with the delete itself being written to a pending delete queue for processing by CouchDB when we transition
to online again. Note that whilst offline any document/attachment creations do not create a revision,
likewise updated documents retain the same revision they had last time they were online. Sporran does
not create CouchDB revisions.

1.4 Transition to Online
-------------------------

When the user comes back online the sync() method is invoked(automatically or by manual call), this as you 
probably suspect re-syncs local storage and CouchDB. Pending deletes are addressed first, followed by documents and 
attachments marked as NOT_UPDATED. This procedure updates revision numbers and creates any new documents/
attachments as needed, also deleted attachments are addressed. The sync method operates in
conjunction with the CouchDB change notification interface which must be enabled for a full sync to be performed.
The sync operation runs in the background, the user can just carry on working, they need not wait for
the sync operation to complete, in fact, syncing is performed transparently all the time the user is online
albeit in a more lightweight manner.

 
2. Construction
---------------

Sporran is constructed as follows :-

SporranInitialiser initialiser = new SporranInitialiser();
Sporran sporran = new Sporran(initialiser);

The parameters should be self evident except for the manualNotificationControl parameter.
This tells Sporran not to automatically start listening for change notifications, this can be manually
controlled by the user using the startChangeNotifications and stopChangeNotifications API. Normally, the user
should leave this parameter as its default(false), change notifications are not only used for 3rd party
database updates but also as part of the sync process. It is possible however that more advanced users
of CouchDB may want to control this themselves, so this option is supplied.

When Sporran initialisation is complete it raises a Ready event to the client as follows :-

 sporran.onReady.first.then((e) => <readyFunction>());
 
Until this event is recieved the client must not assume Sporran is ready for use. 
 
Sporran can be constructed in both online and offline modes with no extra effort on the clients part.

Sporran registers event listeners for the browser online/offline events and controls these transitions
when they occur. Online/Offline can however be selected by the client as needed using the online property.

Also when constructed the local storage database is cleared or preserved depending on the state of the 
preserveLocal flag. If false(default) local storage is cleared, if true local storage is preserved.

3. Control API
---------------

Apart from the document API there is an associated control API to control the behaviour of Sporran comprising
of the manual change notification API described above and the sync API. The sync API comprises of the autoSync 
property and the sync() method. 

The autoSync property allows the client to control whether sync is performed automatically by Sporran
or on demand using the sync method. The sync method can be called anytime when online but will only
be automatically called in the transition to online if autoSync is true, which is its default.

4. Completion Interface
-----------------------

Sporran utilises either a futures based or completion callback interface as is used by Wilt, a completion result 
is made available when the completion callback is called, example :-

JsonObject res = sporran.completionResponse; 

The futures interface passes the completion result as a parameter.

The properties of the result interface are decribed in the Result Interface document.

5. COPY 
---------------------
This has not yet been tested, so I have no idea if the implementation works.


  